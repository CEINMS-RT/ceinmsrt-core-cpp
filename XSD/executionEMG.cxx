// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "executionEMG.hxx"

// ExecutionEMGType
// 

const ExecutionEMGType::ip_type& ExecutionEMGType::
ip () const
{
  return this->ip_.get ();
}

ExecutionEMGType::ip_type& ExecutionEMGType::
ip ()
{
  return this->ip_.get ();
}

void ExecutionEMGType::
ip (const ip_type& x)
{
  this->ip_.set (x);
}

void ExecutionEMGType::
ip (::std::auto_ptr< ip_type > x)
{
  this->ip_.set (x);
}

const ExecutionEMGType::port_type& ExecutionEMGType::
port () const
{
  return this->port_.get ();
}

ExecutionEMGType::port_type& ExecutionEMGType::
port ()
{
  return this->port_.get ();
}

void ExecutionEMGType::
port (const port_type& x)
{
  this->port_.set (x);
}

void ExecutionEMGType::
port (::std::auto_ptr< port_type > x)
{
  this->port_.set (x);
}

const ExecutionEMGType::hpFilter_type& ExecutionEMGType::
hpFilter () const
{
  return this->hpFilter_.get ();
}

ExecutionEMGType::hpFilter_type& ExecutionEMGType::
hpFilter ()
{
  return this->hpFilter_.get ();
}

void ExecutionEMGType::
hpFilter (const hpFilter_type& x)
{
  this->hpFilter_.set (x);
}

void ExecutionEMGType::
hpFilter (::std::auto_ptr< hpFilter_type > x)
{
  this->hpFilter_.set (x);
}

const ExecutionEMGType::lpFilter_type& ExecutionEMGType::
lpFilter () const
{
  return this->lpFilter_.get ();
}

ExecutionEMGType::lpFilter_type& ExecutionEMGType::
lpFilter ()
{
  return this->lpFilter_.get ();
}

void ExecutionEMGType::
lpFilter (const lpFilter_type& x)
{
  this->lpFilter_.set (x);
}

void ExecutionEMGType::
lpFilter (::std::auto_ptr< lpFilter_type > x)
{
  this->lpFilter_.set (x);
}

const ExecutionEMGType::dcFilter_type& ExecutionEMGType::
dcFilter () const
{
  return this->dcFilter_.get ();
}

ExecutionEMGType::dcFilter_type& ExecutionEMGType::
dcFilter ()
{
  return this->dcFilter_.get ();
}

void ExecutionEMGType::
dcFilter (const dcFilter_type& x)
{
  this->dcFilter_.set (x);
}

void ExecutionEMGType::
dcFilter (::std::auto_ptr< dcFilter_type > x)
{
  this->dcFilter_.set (x);
}

const ExecutionEMGType::maxEMG_type& ExecutionEMGType::
maxEMG () const
{
  return this->maxEMG_.get ();
}

ExecutionEMGType::maxEMG_type& ExecutionEMGType::
maxEMG ()
{
  return this->maxEMG_.get ();
}

void ExecutionEMGType::
maxEMG (const maxEMG_type& x)
{
  this->maxEMG_.set (x);
}

void ExecutionEMGType::
maxEMG (::std::auto_ptr< maxEMG_type > x)
{
  this->maxEMG_.set (x);
}


// CoeffList
//

CoeffList::
CoeffList ()
: ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (this)
{
}

CoeffList::
CoeffList (size_type n, const ::xml_schema::double_& x)
: ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (n, x, this)
{
}

CoeffList::
CoeffList (const CoeffList& o,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (o, f, this)
{
}

// MaxEMG
//

MaxEMG::
MaxEMG ()
: ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (this)
{
}

MaxEMG::
MaxEMG (size_type n, const ::xml_schema::double_& x)
: ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (n, x, this)
{
}

MaxEMG::
MaxEMG (const MaxEMG& o,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::simple_type (o, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (o, f, this)
{
}

// Filter
// 

const Filter::aCoeff_type& Filter::
aCoeff () const
{
  return this->aCoeff_.get ();
}

Filter::aCoeff_type& Filter::
aCoeff ()
{
  return this->aCoeff_.get ();
}

void Filter::
aCoeff (const aCoeff_type& x)
{
  this->aCoeff_.set (x);
}

void Filter::
aCoeff (::std::auto_ptr< aCoeff_type > x)
{
  this->aCoeff_.set (x);
}

const Filter::bCoeff_type& Filter::
bCoeff () const
{
  return this->bCoeff_.get ();
}

Filter::bCoeff_type& Filter::
bCoeff ()
{
  return this->bCoeff_.get ();
}

void Filter::
bCoeff (const bCoeff_type& x)
{
  this->bCoeff_.set (x);
}

void Filter::
bCoeff (::std::auto_ptr< bCoeff_type > x)
{
  this->bCoeff_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// ExecutionEMGType
//

ExecutionEMGType::
ExecutionEMGType (const ip_type& ip,
                  const port_type& port,
                  const hpFilter_type& hpFilter,
                  const lpFilter_type& lpFilter,
                  const dcFilter_type& dcFilter,
                  const maxEMG_type& maxEMG)
: ::xml_schema::type (),
  ip_ (ip, this),
  port_ (port, this),
  hpFilter_ (hpFilter, this),
  lpFilter_ (lpFilter, this),
  dcFilter_ (dcFilter, this),
  maxEMG_ (maxEMG, this)
{
}

ExecutionEMGType::
ExecutionEMGType (const ip_type& ip,
                  const port_type& port,
                  ::std::auto_ptr< hpFilter_type > hpFilter,
                  ::std::auto_ptr< lpFilter_type > lpFilter,
                  ::std::auto_ptr< dcFilter_type > dcFilter,
                  const maxEMG_type& maxEMG)
: ::xml_schema::type (),
  ip_ (ip, this),
  port_ (port, this),
  hpFilter_ (hpFilter, this),
  lpFilter_ (lpFilter, this),
  dcFilter_ (dcFilter, this),
  maxEMG_ (maxEMG, this)
{
}

ExecutionEMGType::
ExecutionEMGType (const ExecutionEMGType& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  ip_ (x.ip_, f, this),
  port_ (x.port_, f, this),
  hpFilter_ (x.hpFilter_, f, this),
  lpFilter_ (x.lpFilter_, f, this),
  dcFilter_ (x.dcFilter_, f, this),
  maxEMG_ (x.maxEMG_, f, this)
{
}

ExecutionEMGType::
ExecutionEMGType (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  ip_ (this),
  port_ (this),
  hpFilter_ (this),
  lpFilter_ (this),
  dcFilter_ (this),
  maxEMG_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void ExecutionEMGType::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // ip
    //
    if (n.name () == "ip" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< ip_type > r (
        ip_traits::create (i, f, this));

      if (!ip_.present ())
      {
        this->ip_.set (r);
        continue;
      }
    }

    // port
    //
    if (n.name () == "port" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< port_type > r (
        port_traits::create (i, f, this));

      if (!port_.present ())
      {
        this->port_.set (r);
        continue;
      }
    }

    // hpFilter
    //
    if (n.name () == "hpFilter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< hpFilter_type > r (
        hpFilter_traits::create (i, f, this));

      if (!hpFilter_.present ())
      {
        this->hpFilter_.set (r);
        continue;
      }
    }

    // lpFilter
    //
    if (n.name () == "lpFilter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< lpFilter_type > r (
        lpFilter_traits::create (i, f, this));

      if (!lpFilter_.present ())
      {
        this->lpFilter_.set (r);
        continue;
      }
    }

    // dcFilter
    //
    if (n.name () == "dcFilter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< dcFilter_type > r (
        dcFilter_traits::create (i, f, this));

      if (!dcFilter_.present ())
      {
        this->dcFilter_.set (r);
        continue;
      }
    }

    // maxEMG
    //
    if (n.name () == "maxEMG" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< maxEMG_type > r (
        maxEMG_traits::create (i, f, this));

      if (!maxEMG_.present ())
      {
        this->maxEMG_.set (r);
        continue;
      }
    }

    break;
  }

  if (!ip_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "ip",
      "");
  }

  if (!port_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "port",
      "");
  }

  if (!hpFilter_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "hpFilter",
      "");
  }

  if (!lpFilter_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "lpFilter",
      "");
  }

  if (!dcFilter_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "dcFilter",
      "");
  }

  if (!maxEMG_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "maxEMG",
      "");
  }
}

ExecutionEMGType* ExecutionEMGType::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class ExecutionEMGType (*this, f, c);
}

ExecutionEMGType& ExecutionEMGType::
operator= (const ExecutionEMGType& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->ip_ = x.ip_;
    this->port_ = x.port_;
    this->hpFilter_ = x.hpFilter_;
    this->lpFilter_ = x.lpFilter_;
    this->dcFilter_ = x.dcFilter_;
    this->maxEMG_ = x.maxEMG_;
  }

  return *this;
}

ExecutionEMGType::
~ExecutionEMGType ()
{
}

// CoeffList
//

CoeffList::
CoeffList (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (e, f, this)
{
}

CoeffList::
CoeffList (const ::xercesc::DOMAttr& a,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (a, f, this)
{
}

CoeffList::
CoeffList (const ::std::string& s,
           const ::xercesc::DOMElement* e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, this)
{
}

CoeffList* CoeffList::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class CoeffList (*this, f, c);
}

CoeffList::
~CoeffList ()
{
}

// MaxEMG
//

MaxEMG::
MaxEMG (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::simple_type (e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (e, f, this)
{
}

MaxEMG::
MaxEMG (const ::xercesc::DOMAttr& a,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::simple_type (a, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (a, f, this)
{
}

MaxEMG::
MaxEMG (const ::std::string& s,
        const ::xercesc::DOMElement* e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::simple_type (s, e, f, c),
  ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ > (s, e, f, this)
{
}

MaxEMG* MaxEMG::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class MaxEMG (*this, f, c);
}

MaxEMG::
~MaxEMG ()
{
}

// Filter
//

Filter::
Filter (const aCoeff_type& aCoeff,
        const bCoeff_type& bCoeff)
: ::xml_schema::type (),
  aCoeff_ (aCoeff, this),
  bCoeff_ (bCoeff, this)
{
}

Filter::
Filter (const Filter& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  aCoeff_ (x.aCoeff_, f, this),
  bCoeff_ (x.bCoeff_, f, this)
{
}

Filter::
Filter (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  aCoeff_ (this),
  bCoeff_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void Filter::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // aCoeff
    //
    if (n.name () == "aCoeff" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< aCoeff_type > r (
        aCoeff_traits::create (i, f, this));

      if (!aCoeff_.present ())
      {
        this->aCoeff_.set (r);
        continue;
      }
    }

    // bCoeff
    //
    if (n.name () == "bCoeff" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< bCoeff_type > r (
        bCoeff_traits::create (i, f, this));

      if (!bCoeff_.present ())
      {
        this->bCoeff_.set (r);
        continue;
      }
    }

    break;
  }

  if (!aCoeff_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "aCoeff",
      "");
  }

  if (!bCoeff_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bCoeff",
      "");
  }
}

Filter* Filter::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Filter (*this, f, c);
}

Filter& Filter::
operator= (const Filter& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->aCoeff_ = x.aCoeff_;
    this->bCoeff_ = x.bCoeff_;
  }

  return *this;
}

Filter::
~Filter ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::ExecutionEMGType > (
    ::executionEMG (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionEMGType > (
    ::executionEMG (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionEMGType > (
    ::executionEMG (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::executionEMG (isrc, f, p);
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::executionEMG (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::executionEMG (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::executionEMG (isrc, f, p);
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::executionEMG (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::executionEMG (isrc, h, f, p);
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::ExecutionEMGType > (
    ::executionEMG (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionEMGType > (
    ::executionEMG (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::ExecutionEMGType > (
    ::executionEMG (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (const ::xercesc::DOMDocument& doc,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::ExecutionEMGType > (
      ::executionEMG (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "executionEMG" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::ExecutionEMGType > r (
      ::xsd::cxx::tree::traits< ::ExecutionEMGType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "executionEMG",
    "");
}

::std::auto_ptr< ::ExecutionEMGType >
executionEMG (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "executionEMG" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::ExecutionEMGType > r (
      ::xsd::cxx::tree::traits< ::ExecutionEMGType, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "executionEMG",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
operator<< (::xercesc::DOMElement& e, const ExecutionEMGType& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // ip
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "ip",
        e));

    s << i.ip ();
  }

  // port
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "port",
        e));

    s << i.port ();
  }

  // hpFilter
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "hpFilter",
        e));

    s << i.hpFilter ();
  }

  // lpFilter
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "lpFilter",
        e));

    s << i.lpFilter ();
  }

  // dcFilter
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "dcFilter",
        e));

    s << i.dcFilter ();
  }

  // maxEMG
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "maxEMG",
        e));

    s << i.maxEMG ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const CoeffList& i)
{
  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const CoeffList& i)
{
  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const CoeffList& i)
{
  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const MaxEMG& i)
{
  e << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >& > (i);
}

void
operator<< (::xercesc::DOMAttr& a, const MaxEMG& i)
{
  a << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >& > (i);
}

void
operator<< (::xml_schema::list_stream& l,
            const MaxEMG& i)
{
  l << static_cast< const ::xsd::cxx::tree::list< ::xml_schema::double_, char, ::xsd::cxx::tree::schema_type::double_ >& > (i);
}

void
operator<< (::xercesc::DOMElement& e, const Filter& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // aCoeff
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "aCoeff",
        e));

    s << i.aCoeff ();
  }

  // bCoeff
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bCoeff",
        e));

    s << i.bCoeff ();
  }
}

void
executionEMG (::std::ostream& o,
              const ::ExecutionEMGType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::executionEMG (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
executionEMG (::std::ostream& o,
              const ::ExecutionEMGType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::executionEMG (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
executionEMG (::std::ostream& o,
              const ::ExecutionEMGType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::executionEMG (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
executionEMG (::xercesc::XMLFormatTarget& t,
              const ::ExecutionEMGType& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::executionEMG (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
executionEMG (::xercesc::XMLFormatTarget& t,
              const ::ExecutionEMGType& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::executionEMG (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
executionEMG (::xercesc::XMLFormatTarget& t,
              const ::ExecutionEMGType& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::executionEMG (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
executionEMG (::xercesc::DOMDocument& d,
              const ::ExecutionEMGType& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "executionEMG" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "executionEMG",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
executionEMG (const ::ExecutionEMGType& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "executionEMG",
      "",
      m, f));

  ::executionEMG (*d, s, f);
  return d;
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

