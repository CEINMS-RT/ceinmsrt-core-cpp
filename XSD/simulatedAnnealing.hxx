// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef CXX__SIMULATED_ANNEALING_HXX
#define CXX__SIMULATED_ANNEALING_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class DofCalSequence;
class TrialsSequence;
class Trials;
class PreScaling;
class ComputeSpline;
class DofCalibrationSequence;
class OptionCalibration;
class Calibration;
class SimulatedAnnealingType;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class DofCalSequence: public ::xml_schema::simple_type,
  public ::xsd::cxx::tree::list< ::xml_schema::string, char >
{
  public:
  DofCalSequence ();

  DofCalSequence (size_type n, const ::xml_schema::string& x);

  template < typename I >
  DofCalSequence (const I& begin, const I& end)
  : ::xsd::cxx::tree::list< ::xml_schema::string, char > (begin, end, this)
  {
  }

  DofCalSequence (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  DofCalSequence (const ::xercesc::DOMAttr& a,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  DofCalSequence (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  DofCalSequence (const DofCalSequence& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual DofCalSequence*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~DofCalSequence ();
};

class TrialsSequence: public ::xml_schema::type
{
  public:
  // trialName
  //
  typedef ::xml_schema::string trialName_type;
  typedef ::xsd::cxx::tree::traits< trialName_type, char > trialName_traits;

  const trialName_type&
  trialName () const;

  trialName_type&
  trialName ();

  void
  trialName (const trialName_type& x);

  void
  trialName (::std::auto_ptr< trialName_type > p);

  // cropMinTimeFromZero
  //
  typedef ::xml_schema::double_ cropMinTimeFromZero_type;
  typedef ::xsd::cxx::tree::traits< cropMinTimeFromZero_type, char, ::xsd::cxx::tree::schema_type::double_ > cropMinTimeFromZero_traits;

  const cropMinTimeFromZero_type&
  cropMinTimeFromZero () const;

  cropMinTimeFromZero_type&
  cropMinTimeFromZero ();

  void
  cropMinTimeFromZero (const cropMinTimeFromZero_type& x);

  // cropMaxTimeFromZero
  //
  typedef ::xml_schema::double_ cropMaxTimeFromZero_type;
  typedef ::xsd::cxx::tree::traits< cropMaxTimeFromZero_type, char, ::xsd::cxx::tree::schema_type::double_ > cropMaxTimeFromZero_traits;

  const cropMaxTimeFromZero_type&
  cropMaxTimeFromZero () const;

  cropMaxTimeFromZero_type&
  cropMaxTimeFromZero ();

  void
  cropMaxTimeFromZero (const cropMaxTimeFromZero_type& x);

  // Constructors.
  //
  TrialsSequence (const trialName_type&,
                  const cropMinTimeFromZero_type&,
                  const cropMaxTimeFromZero_type&);

  TrialsSequence (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  TrialsSequence (const TrialsSequence& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual TrialsSequence*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  TrialsSequence&
  operator= (const TrialsSequence& x);

  virtual 
  ~TrialsSequence ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< trialName_type > trialName_;
  ::xsd::cxx::tree::one< cropMinTimeFromZero_type > cropMinTimeFromZero_;
  ::xsd::cxx::tree::one< cropMaxTimeFromZero_type > cropMaxTimeFromZero_;
};

class Trials: public ::xml_schema::type
{
  public:
  // directory
  //
  typedef ::xml_schema::string directory_type;
  typedef ::xsd::cxx::tree::traits< directory_type, char > directory_traits;

  const directory_type&
  directory () const;

  directory_type&
  directory ();

  void
  directory (const directory_type& x);

  void
  directory (::std::auto_ptr< directory_type > p);

  // trial
  //
  typedef ::TrialsSequence trial_type;
  typedef ::xsd::cxx::tree::sequence< trial_type > trial_sequence;
  typedef trial_sequence::iterator trial_iterator;
  typedef trial_sequence::const_iterator trial_const_iterator;
  typedef ::xsd::cxx::tree::traits< trial_type, char > trial_traits;

  const trial_sequence&
  trial () const;

  trial_sequence&
  trial ();

  void
  trial (const trial_sequence& s);

  // Constructors.
  //
  Trials (const directory_type&);

  Trials (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  Trials (const Trials& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual Trials*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Trials&
  operator= (const Trials& x);

  virtual 
  ~Trials ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< directory_type > directory_;
  trial_sequence trial_;
};

class PreScaling: public ::xml_schema::type
{
  public:
  // use
  //
  typedef ::xml_schema::boolean use_type;
  typedef ::xsd::cxx::tree::traits< use_type, char > use_traits;

  const use_type&
  use () const;

  use_type&
  use ();

  void
  use (const use_type& x);

  // unscaledOsimFile
  //
  typedef ::xml_schema::string unscaledOsimFile_type;
  typedef ::xsd::cxx::tree::traits< unscaledOsimFile_type, char > unscaledOsimFile_traits;

  const unscaledOsimFile_type&
  unscaledOsimFile () const;

  unscaledOsimFile_type&
  unscaledOsimFile ();

  void
  unscaledOsimFile (const unscaledOsimFile_type& x);

  void
  unscaledOsimFile (::std::auto_ptr< unscaledOsimFile_type > p);

  // Constructors.
  //
  PreScaling (const use_type&,
              const unscaledOsimFile_type&);

  PreScaling (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  PreScaling (const PreScaling& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual PreScaling*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PreScaling&
  operator= (const PreScaling& x);

  virtual 
  ~PreScaling ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< use_type > use_;
  ::xsd::cxx::tree::one< unscaledOsimFile_type > unscaledOsimFile_;
};

class ComputeSpline: public ::xml_schema::type
{
  public:
  // use
  //
  typedef ::xml_schema::boolean use_type;
  typedef ::xsd::cxx::tree::traits< use_type, char > use_traits;

  const use_type&
  use () const;

  use_type&
  use ();

  void
  use (const use_type& x);

  // printingOption
  //
  typedef ::xml_schema::int_ printingOption_type;
  typedef ::xsd::cxx::tree::optional< printingOption_type > printingOption_optional;
  typedef ::xsd::cxx::tree::traits< printingOption_type, char > printingOption_traits;

  const printingOption_optional&
  printingOption () const;

  printingOption_optional&
  printingOption ();

  void
  printingOption (const printingOption_type& x);

  void
  printingOption (const printingOption_optional& x);

  // numberOfNode
  //
  typedef ::xml_schema::int_ numberOfNode_type;
  typedef ::xsd::cxx::tree::optional< numberOfNode_type > numberOfNode_optional;
  typedef ::xsd::cxx::tree::traits< numberOfNode_type, char > numberOfNode_traits;

  const numberOfNode_optional&
  numberOfNode () const;

  numberOfNode_optional&
  numberOfNode ();

  void
  numberOfNode (const numberOfNode_type& x);

  void
  numberOfNode (const numberOfNode_optional& x);

  // Constructors.
  //
  ComputeSpline (const use_type&);

  ComputeSpline (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ComputeSpline (const ComputeSpline& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ComputeSpline*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ComputeSpline&
  operator= (const ComputeSpline& x);

  virtual 
  ~ComputeSpline ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< use_type > use_;
  printingOption_optional printingOption_;
  numberOfNode_optional numberOfNode_;
};

class DofCalibrationSequence: public ::xml_schema::type
{
  public:
  // dofs
  //
  typedef ::DofCalSequence dofs_type;
  typedef ::xsd::cxx::tree::sequence< dofs_type > dofs_sequence;
  typedef dofs_sequence::iterator dofs_iterator;
  typedef dofs_sequence::const_iterator dofs_const_iterator;
  typedef ::xsd::cxx::tree::traits< dofs_type, char > dofs_traits;

  const dofs_sequence&
  dofs () const;

  dofs_sequence&
  dofs ();

  void
  dofs (const dofs_sequence& s);

  // Constructors.
  //
  DofCalibrationSequence ();

  DofCalibrationSequence (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  DofCalibrationSequence (const DofCalibrationSequence& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual DofCalibrationSequence*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  DofCalibrationSequence&
  operator= (const DofCalibrationSequence& x);

  virtual 
  ~DofCalibrationSequence ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  dofs_sequence dofs_;
};

class OptionCalibration: public ::xml_schema::type
{
  public:
  // noEpsilon
  //
  typedef ::xml_schema::int_ noEpsilon_type;
  typedef ::xsd::cxx::tree::traits< noEpsilon_type, char > noEpsilon_traits;

  const noEpsilon_type&
  noEpsilon () const;

  noEpsilon_type&
  noEpsilon ();

  void
  noEpsilon (const noEpsilon_type& x);

  // RT
  //
  typedef ::xml_schema::double_ RT_type;
  typedef ::xsd::cxx::tree::optional< RT_type > RT_optional;
  typedef ::xsd::cxx::tree::traits< RT_type, char, ::xsd::cxx::tree::schema_type::double_ > RT_traits;

  const RT_optional&
  RT () const;

  RT_optional&
  RT ();

  void
  RT (const RT_type& x);

  void
  RT (const RT_optional& x);

  // T
  //
  typedef ::xml_schema::double_ T_type;
  typedef ::xsd::cxx::tree::optional< T_type > T_optional;
  typedef ::xsd::cxx::tree::traits< T_type, char, ::xsd::cxx::tree::schema_type::double_ > T_traits;

  const T_optional&
  T () const;

  T_optional&
  T ();

  void
  T (const T_type& x);

  void
  T (const T_optional& x);

  // NS
  //
  typedef ::xml_schema::int_ NS_type;
  typedef ::xsd::cxx::tree::optional< NS_type > NS_optional;
  typedef ::xsd::cxx::tree::traits< NS_type, char > NS_traits;

  const NS_optional&
  NS () const;

  NS_optional&
  NS ();

  void
  NS (const NS_type& x);

  void
  NS (const NS_optional& x);

  // NT
  //
  typedef ::xml_schema::int_ NT_type;
  typedef ::xsd::cxx::tree::optional< NT_type > NT_optional;
  typedef ::xsd::cxx::tree::traits< NT_type, char > NT_traits;

  const NT_optional&
  NT () const;

  NT_optional&
  NT ();

  void
  NT (const NT_type& x);

  void
  NT (const NT_optional& x);

  // epsilon
  //
  typedef ::xml_schema::double_ epsilon_type;
  typedef ::xsd::cxx::tree::traits< epsilon_type, char, ::xsd::cxx::tree::schema_type::double_ > epsilon_traits;

  const epsilon_type&
  epsilon () const;

  epsilon_type&
  epsilon ();

  void
  epsilon (const epsilon_type& x);

  // maxNoEval
  //
  typedef ::xml_schema::int_ maxNoEval_type;
  typedef ::xsd::cxx::tree::traits< maxNoEval_type, char > maxNoEval_traits;

  const maxNoEval_type&
  maxNoEval () const;

  maxNoEval_type&
  maxNoEval ();

  void
  maxNoEval (const maxNoEval_type& x);

  // Constructors.
  //
  OptionCalibration (const noEpsilon_type&,
                     const epsilon_type&,
                     const maxNoEval_type&);

  OptionCalibration (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  OptionCalibration (const OptionCalibration& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual OptionCalibration*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OptionCalibration&
  operator= (const OptionCalibration& x);

  virtual 
  ~OptionCalibration ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< noEpsilon_type > noEpsilon_;
  RT_optional RT_;
  T_optional T_;
  NS_optional NS_;
  NT_optional NT_;
  ::xsd::cxx::tree::one< epsilon_type > epsilon_;
  ::xsd::cxx::tree::one< maxNoEval_type > maxNoEval_;
};

class Calibration: public ::xml_schema::type
{
  public:
  // use
  //
  typedef ::xml_schema::boolean use_type;
  typedef ::xsd::cxx::tree::traits< use_type, char > use_traits;

  const use_type&
  use () const;

  use_type&
  use ();

  void
  use (const use_type& x);

  // objectiveFunction
  //
  typedef ::xml_schema::string objectiveFunction_type;
  typedef ::xsd::cxx::tree::traits< objectiveFunction_type, char > objectiveFunction_traits;

  const objectiveFunction_type&
  objectiveFunction () const;

  objectiveFunction_type&
  objectiveFunction ();

  void
  objectiveFunction (const objectiveFunction_type& x);

  void
  objectiveFunction (::std::auto_ptr< objectiveFunction_type > p);

  // filterEMG
  //
  typedef ::xml_schema::boolean filterEMG_type;
  typedef ::xsd::cxx::tree::optional< filterEMG_type > filterEMG_optional;
  typedef ::xsd::cxx::tree::traits< filterEMG_type, char > filterEMG_traits;

  const filterEMG_optional&
  filterEMG () const;

  filterEMG_optional&
  filterEMG ();

  void
  filterEMG (const filterEMG_type& x);

  void
  filterEMG (const filterEMG_optional& x);

  // EMD
  //
  typedef ::xml_schema::double_ EMD_type;
  typedef ::xsd::cxx::tree::optional< EMD_type > EMD_optional;
  typedef ::xsd::cxx::tree::traits< EMD_type, char, ::xsd::cxx::tree::schema_type::double_ > EMD_traits;

  const EMD_optional&
  EMD () const;

  EMD_optional&
  EMD ();

  void
  EMD (const EMD_type& x);

  void
  EMD (const EMD_optional& x);

  // dofToCalibrate
  //
  typedef ::DofCalibrationSequence dofToCalibrate_type;
  typedef ::xsd::cxx::tree::traits< dofToCalibrate_type, char > dofToCalibrate_traits;

  const dofToCalibrate_type&
  dofToCalibrate () const;

  dofToCalibrate_type&
  dofToCalibrate ();

  void
  dofToCalibrate (const dofToCalibrate_type& x);

  void
  dofToCalibrate (::std::auto_ptr< dofToCalibrate_type > p);

  // trials
  //
  typedef ::Trials trials_type;
  typedef ::xsd::cxx::tree::traits< trials_type, char > trials_traits;

  const trials_type&
  trials () const;

  trials_type&
  trials ();

  void
  trials (const trials_type& x);

  void
  trials (::std::auto_ptr< trials_type > p);

  // option
  //
  typedef ::OptionCalibration option_type;
  typedef ::xsd::cxx::tree::traits< option_type, char > option_traits;

  const option_type&
  option () const;

  option_type&
  option ();

  void
  option (const option_type& x);

  void
  option (::std::auto_ptr< option_type > p);

  // inputSubjectXMLName
  //
  typedef ::xml_schema::string inputSubjectXMLName_type;
  typedef ::xsd::cxx::tree::traits< inputSubjectXMLName_type, char > inputSubjectXMLName_traits;

  const inputSubjectXMLName_type&
  inputSubjectXMLName () const;

  inputSubjectXMLName_type&
  inputSubjectXMLName ();

  void
  inputSubjectXMLName (const inputSubjectXMLName_type& x);

  void
  inputSubjectXMLName (::std::auto_ptr< inputSubjectXMLName_type > p);

  // outputSubjectXMLName
  //
  typedef ::xml_schema::string outputSubjectXMLName_type;
  typedef ::xsd::cxx::tree::traits< outputSubjectXMLName_type, char > outputSubjectXMLName_traits;

  const outputSubjectXMLName_type&
  outputSubjectXMLName () const;

  outputSubjectXMLName_type&
  outputSubjectXMLName ();

  void
  outputSubjectXMLName (const outputSubjectXMLName_type& x);

  void
  outputSubjectXMLName (::std::auto_ptr< outputSubjectXMLName_type > p);

  // Constructors.
  //
  Calibration (const use_type&,
               const objectiveFunction_type&,
               const dofToCalibrate_type&,
               const trials_type&,
               const option_type&,
               const inputSubjectXMLName_type&,
               const outputSubjectXMLName_type&);

  Calibration (const use_type&,
               const objectiveFunction_type&,
               ::std::auto_ptr< dofToCalibrate_type >,
               ::std::auto_ptr< trials_type >,
               ::std::auto_ptr< option_type >,
               const inputSubjectXMLName_type&,
               const outputSubjectXMLName_type&);

  Calibration (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  Calibration (const Calibration& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual Calibration*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Calibration&
  operator= (const Calibration& x);

  virtual 
  ~Calibration ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< use_type > use_;
  ::xsd::cxx::tree::one< objectiveFunction_type > objectiveFunction_;
  filterEMG_optional filterEMG_;
  EMD_optional EMD_;
  ::xsd::cxx::tree::one< dofToCalibrate_type > dofToCalibrate_;
  ::xsd::cxx::tree::one< trials_type > trials_;
  ::xsd::cxx::tree::one< option_type > option_;
  ::xsd::cxx::tree::one< inputSubjectXMLName_type > inputSubjectXMLName_;
  ::xsd::cxx::tree::one< outputSubjectXMLName_type > outputSubjectXMLName_;
};

class SimulatedAnnealingType: public ::xml_schema::type
{
  public:
  // EMGProccesing
  //
  typedef ::xml_schema::string EMGProccesing_type;
  typedef ::xsd::cxx::tree::optional< EMGProccesing_type > EMGProccesing_optional;
  typedef ::xsd::cxx::tree::traits< EMGProccesing_type, char > EMGProccesing_traits;

  const EMGProccesing_optional&
  EMGProccesing () const;

  EMGProccesing_optional&
  EMGProccesing ();

  void
  EMGProccesing (const EMGProccesing_type& x);

  void
  EMGProccesing (const EMGProccesing_optional& x);

  void
  EMGProccesing (::std::auto_ptr< EMGProccesing_type > p);

  // osimFile
  //
  typedef ::xml_schema::string osimFile_type;
  typedef ::xsd::cxx::tree::traits< osimFile_type, char > osimFile_traits;

  const osimFile_type&
  osimFile () const;

  osimFile_type&
  osimFile ();

  void
  osimFile (const osimFile_type& x);

  void
  osimFile (::std::auto_ptr< osimFile_type > p);

  // subjectXML
  //
  typedef ::xml_schema::string subjectXML_type;
  typedef ::xsd::cxx::tree::traits< subjectXML_type, char > subjectXML_traits;

  const subjectXML_type&
  subjectXML () const;

  subjectXML_type&
  subjectXML ();

  void
  subjectXML (const subjectXML_type& x);

  void
  subjectXML (::std::auto_ptr< subjectXML_type > p);

  // nameOfSubject
  //
  typedef ::xml_schema::string nameOfSubject_type;
  typedef ::xsd::cxx::tree::traits< nameOfSubject_type, char > nameOfSubject_traits;

  const nameOfSubject_type&
  nameOfSubject () const;

  nameOfSubject_type&
  nameOfSubject ();

  void
  nameOfSubject (const nameOfSubject_type& x);

  void
  nameOfSubject (::std::auto_ptr< nameOfSubject_type > p);

  // dofsSpline
  //
  typedef ::DofCalSequence dofsSpline_type;
  typedef ::xsd::cxx::tree::traits< dofsSpline_type, char > dofsSpline_traits;

  const dofsSpline_type&
  dofsSpline () const;

  dofsSpline_type&
  dofsSpline ();

  void
  dofsSpline (const dofsSpline_type& x);

  void
  dofsSpline (::std::auto_ptr< dofsSpline_type > p);

  // computeSpline
  //
  typedef ::ComputeSpline computeSpline_type;
  typedef ::xsd::cxx::tree::traits< computeSpline_type, char > computeSpline_traits;

  const computeSpline_type&
  computeSpline () const;

  computeSpline_type&
  computeSpline ();

  void
  computeSpline (const computeSpline_type& x);

  void
  computeSpline (::std::auto_ptr< computeSpline_type > p);

  // preScaling
  //
  typedef ::PreScaling preScaling_type;
  typedef ::xsd::cxx::tree::optional< preScaling_type > preScaling_optional;
  typedef ::xsd::cxx::tree::traits< preScaling_type, char > preScaling_traits;

  const preScaling_optional&
  preScaling () const;

  preScaling_optional&
  preScaling ();

  void
  preScaling (const preScaling_type& x);

  void
  preScaling (const preScaling_optional& x);

  void
  preScaling (::std::auto_ptr< preScaling_type > p);

  // calibration
  //
  typedef ::Calibration calibration_type;
  typedef ::xsd::cxx::tree::traits< calibration_type, char > calibration_traits;

  const calibration_type&
  calibration () const;

  calibration_type&
  calibration ();

  void
  calibration (const calibration_type& x);

  void
  calibration (::std::auto_ptr< calibration_type > p);

  // Constructors.
  //
  SimulatedAnnealingType (const osimFile_type&,
                          const subjectXML_type&,
                          const nameOfSubject_type&,
                          const dofsSpline_type&,
                          const computeSpline_type&,
                          const calibration_type&);

  SimulatedAnnealingType (const osimFile_type&,
                          const subjectXML_type&,
                          const nameOfSubject_type&,
                          const dofsSpline_type&,
                          ::std::auto_ptr< computeSpline_type >,
                          ::std::auto_ptr< calibration_type >);

  SimulatedAnnealingType (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  SimulatedAnnealingType (const SimulatedAnnealingType& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual SimulatedAnnealingType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SimulatedAnnealingType&
  operator= (const SimulatedAnnealingType& x);

  virtual 
  ~SimulatedAnnealingType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  EMGProccesing_optional EMGProccesing_;
  ::xsd::cxx::tree::one< osimFile_type > osimFile_;
  ::xsd::cxx::tree::one< subjectXML_type > subjectXML_;
  ::xsd::cxx::tree::one< nameOfSubject_type > nameOfSubject_;
  ::xsd::cxx::tree::one< dofsSpline_type > dofsSpline_;
  ::xsd::cxx::tree::one< computeSpline_type > computeSpline_;
  preScaling_optional preScaling_;
  ::xsd::cxx::tree::one< calibration_type > calibration_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SimulatedAnnealingType >
simulatedAnnealing (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // CXX__SIMULATED_ANNEALING_HXX
